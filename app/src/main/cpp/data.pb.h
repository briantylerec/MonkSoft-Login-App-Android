// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace MonkPackage {
class Monk;
struct MonkDefaultTypeInternal;
extern MonkDefaultTypeInternal _Monk_default_instance_;
}  // namespace MonkPackage
PROTOBUF_NAMESPACE_OPEN
template<> ::MonkPackage::Monk* Arena::CreateMaybeMessage<::MonkPackage::Monk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MonkPackage {

// ===================================================================

class Monk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MonkPackage.Monk) */ {
 public:
  inline Monk() : Monk(nullptr) {}
  ~Monk() override;
  explicit PROTOBUF_CONSTEXPR Monk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Monk(const Monk& from);
  Monk(Monk&& from) noexcept
    : Monk() {
    *this = ::std::move(from);
  }

  inline Monk& operator=(const Monk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Monk& operator=(Monk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Monk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Monk* internal_default_instance() {
    return reinterpret_cast<const Monk*>(
               &_Monk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Monk& a, Monk& b) {
    a.Swap(&b);
  }
  inline void Swap(Monk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Monk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Monk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Monk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Monk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Monk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Monk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MonkPackage.Monk";
  }
  protected:
  explicit Monk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonkcodeFieldNumber = 1,
  };
  // required string monkcode = 1;
  bool has_monkcode() const;
  private:
  bool _internal_has_monkcode() const;
  public:
  void clear_monkcode();
  const std::string& monkcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_monkcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_monkcode();
  PROTOBUF_NODISCARD std::string* release_monkcode();
  void set_allocated_monkcode(std::string* monkcode);
  private:
  const std::string& _internal_monkcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_monkcode(const std::string& value);
  std::string* _internal_mutable_monkcode();
  public:

  // @@protoc_insertion_point(class_scope:MonkPackage.Monk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monkcode_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Monk

// required string monkcode = 1;
inline bool Monk::_internal_has_monkcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Monk::has_monkcode() const {
  return _internal_has_monkcode();
}
inline void Monk::clear_monkcode() {
  monkcode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Monk::monkcode() const {
  // @@protoc_insertion_point(field_get:MonkPackage.Monk.monkcode)
  return _internal_monkcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Monk::set_monkcode(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 monkcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MonkPackage.Monk.monkcode)
}
inline std::string* Monk::mutable_monkcode() {
  std::string* _s = _internal_mutable_monkcode();
  // @@protoc_insertion_point(field_mutable:MonkPackage.Monk.monkcode)
  return _s;
}
inline const std::string& Monk::_internal_monkcode() const {
  return monkcode_.Get();
}
inline void Monk::_internal_set_monkcode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  monkcode_.Set(value, GetArenaForAllocation());
}
inline std::string* Monk::_internal_mutable_monkcode() {
  _has_bits_[0] |= 0x00000001u;
  return monkcode_.Mutable(GetArenaForAllocation());
}
inline std::string* Monk::release_monkcode() {
  // @@protoc_insertion_point(field_release:MonkPackage.Monk.monkcode)
  if (!_internal_has_monkcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = monkcode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (monkcode_.IsDefault()) {
    monkcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Monk::set_allocated_monkcode(std::string* monkcode) {
  if (monkcode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  monkcode_.SetAllocated(monkcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (monkcode_.IsDefault()) {
    monkcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MonkPackage.Monk.monkcode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace MonkPackage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
